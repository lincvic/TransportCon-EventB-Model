<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1641914434295" org.eventb.texttools.text_representation="machine Machine1_TransportCon sees Context_TransportCon&#10;&#10;variables admins vendors drivers packages messages packages_own_status packages_vendors packages_drivers messages_sent&#10;&#10;invariants&#10;  @inv1 admins ⊆  USER // managers belong to USER set&#10;  @inv2 drivers ⊆  USER // drivers belong to USER set&#10;  @inv3 vendors ⊆  USER // vendors belong to USER set&#10;  @inv4 packages ⊆  PACKAGE // packages belong to PACKAGE set&#10;  @inv5 packages_vendors ∈ packages → vendors // Every package supplied by only one vendor and every package should have a vendor&#10;  @inv6 packages_drivers ∈packages ⇸ drivers // Every package can only carried by one driver. Not every package has a driver to deliver it.&#10;  @inv7 packages_own_status ∈ packages ⇸ package_status // Every package has a status{pending, in_progress, delivered}&#10;  @inv8 messages ⊆  MESSAGE // messages belong to MESSAGE set&#10;  @inv9 messages_sent ∈ messages → packages  // Every message with package information should be sent to one driver, So it was a function between message and packages.&#10;&#10;events&#10;  event INITIALISATION&#10;    then&#10;      @act1 admins ≔ ∅&#10;      @act2 vendors ≔ ∅&#10;      @act3 drivers ≔ ∅&#10;      @act4 packages ≔ ∅&#10;      @act5 messages ≔ ∅&#10;      @act6 packages_own_status ≔ ∅&#10;      @act7 packages_vendors ≔ ∅&#10;      @act8 packages_drivers ≔ ∅&#10;      @act9 messages_sent≔ ∅&#10;  end&#10;&#10;  event addAdmin // Add new admin to the system.&#10;    any user sys&#10;    where&#10;      @grd1 user ∈ USER // User variable belongs to USER set&#10;      @grd2 user ∉ admins // User variable is not belongs to admins subset&#10;      @grd3 user ∉ vendors // User variable is not belongs to vendors subset&#10;      @grd4 user ∉ drivers // User variable is not belongs to drivers subset&#10;      @grd5 sys ∈ SYS_ADMIN // Only System Admin could add new admin in this system&#10;    then&#10;      @act1 admins ≔ admins ∪ {user}&#10;  end&#10;&#10;  event addDriver // Add new driver to the system. This event satisfied the requirement 1.&#10;    any driver user&#10;    where&#10;      @grd1 driver ∈ USER // Driver variable belongs to USER set&#10;&#9;  @grd2 driver ∉ admins // Driver variable is not belongs to admins subset&#10;      @grd3 driver ∉ vendors // Driver variable is not belongs to vendors subset&#10;      @grd4 driver ∉ drivers // Driver variable is not belongs to driver subset&#10;      @grd5 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;    then&#10;      @act1 drivers ≔ drivers ∪ {driver} // add the new driver to the subset drivers&#10;  end&#10;&#10;  event addVendor // Add new vendor to the system. This event satisfied the requirement 2.&#10;    any vendor user&#10;    where&#10;      @grd1 vendor ∈ USER // Vendor variable belongs to USER set&#10;      @grd2 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd3 vendor ∉ drivers // Vendor variable is not belongs to drivers subset&#10;      @grd4 vendor ∉ vendors // Vendor variable is not belongs to vendors subset&#10;      @grd5 vendor ∉ admins //Vendor variable is not belongs to admins subset&#10;    then&#10;      @act1 vendors ≔ vendors ∪ {vendor} // add the new vendor to the vendors.&#10;  end&#10;&#10;  event addPackage // Add new package and choose a vendor. According our to coursework 1, we need to select a vendor before assigh it to a driver. This event satisfied a part of the requirement 3.&#10;    any package user vendor&#10;    where&#10;      @grd1 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd2 package ∈ PACKAGE ∖ packages // Make sure package variable is belong to PACKAGE set but not packages subset&#10;      @grd3 vendor ∈vendors //Vendor variable is belong to vendors subset&#10;    then&#10;      @act1 packages_vendors(package) ≔ vendor // add a new pair(package -&gt; vendor) to packages_vendors.&#10;      @act2 packages ≔  packages ∪ {package} // add the new package to packages.&#10;  end&#10;&#10;  event assignPackage // Assign a package and send a message to a driver. This event satisfied a part of the requirement 3 and 6.&#10;    any package user vendor driver message&#10;    where&#10;      @grd1 package ∈ packages&#10;      @grd2 driver ∈ drivers&#10;      @grd3 vendor ∈ vendors&#10;      @grd4 message ∈ MESSAGE ∖ messages // Make sure package variable is belong to MESSAGE set but not messages subset&#10;      @grd5 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd6 {package} ◁ packages_own_status = ∅ //Only package without any status infotmation can be assing to driver&#10;    then&#10;      @act1 packages_own_status(package) ≔ pending  // change the pair which in packages_own_status to &quot;package -&gt; pending&quot;.&#10;      @act2 packages_drivers(package) ≔ driver // add a new pair(package -&gt; driver) to packages_drivers .&#10;      @act3 messages_sent(message) ≔ package // add a new pair(message -&gt; package) to message_sent.&#10;      @act4 messages ≔ messages ∪ {message} // Add new message&#10;  end&#10;&#10;  event sendMessageToDriver //Send a message to driver during the driver attending the delivery job&#10;  any message driver user package&#10;  where&#10;&#9;  @grd1 message ∈ MESSAGE ∖ messages //Make sure the message is new message&#10;&#9;  @grd2 package ∈ packages&#10;&#9;  @grd3 driver ∈ drivers&#10;&#9;  @grd4 packages_drivers ▷ {driver} ≠ ∅ //Make sure the driver is attending a delivery job&#10;&#9;  @grd5 package ∈ dom(packages_drivers▷{driver}) //Make sure the pacakge is assigned to this driver&#10;&#9;  @grd6 user ∈ admins //Only admin could access this event&#10;&#9;  @grd7 {package} ◁ packages_own_status ≠ ∅ //Make sure package has a status.&#10;&#9;  @grd8 packages_own_status(package) ∈ package_status //Make sure package has a status&#10;  then&#10;&#9;  @act1 messages ≔ messages ∪ {message} //Add new message&#10;&#9;  @act2 messages_sent(message) ≔ package // add a new pair(message -&gt; package) to message_sent.&#10;  end&#10;&#10;  event viewJobList // Show the all the package which status are pending, in_progress or delivered. This event satisfied the requirement 4.&#10;    any user result&#10;    where&#10;      @grd1 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd2 result = packages_own_status ▷{pending, in_progress, delivered} // Show the packages which status is pending, in_progress or delivered.&#10;  end&#10;&#10;  event cancelPendingPackage // cancel the pending package.This event satisfied the requirement 7.&#10;    any package user&#10;    where&#10;      @grd1 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd2 package ∈ packages&#10;      @grd3 {package} ◁ packages_own_status ≠ ∅ //Make sure package has a status, same like package∈dom(packages_own_status)&#10;      @grd4 packages_own_status(package) = pending // Filter the package in pending.&#10;    then&#10;      @act1 packages_own_status ≔{package} ⩤ packages_own_status // Remove the pair that contain this package from packages_own_status.&#10;      @act2 packages_drivers ≔  {package} ⩤ packages_drivers //Remove the driver information of this package&#10;      @act3 messages_sent ≔  messages_sent ⩥ {package} //Remove message information related to package&#10;      @act4 messages ≔  messages ∖ dom(messages_sent ▷ {package}) //Remove message from messages set&#10;  end&#10;&#10;  event viewDeliveredPackageList // Show all the delivered packages by a spcecific driver.This event satisfied the requirement 5.&#10;    any driver user result&#10;    where&#10;      @grd1 user ∈ admins // user belongs to admins.(only admin can access this event)&#10;      @grd2 driver ∈ drivers&#10;      @grd3 result = dom(packages_drivers ▷ {driver}) ∩ dom(packages_own_status ▷ {delivered}) // Get all the delivered packages that assigned to the driver.  dom(packages_drivers ▷ {driver}) is used to find out the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {delivered} is used to find the key in packages_own_status whick packages status is delivered.&#10;  end&#10;&#10;  event viewAllocatedJobs // Driver could view the job allocated to them， meet the requirement 8&#10;    any driver result&#10;    where&#10;      @grd1 driver ∈ drivers&#10;      @grd2 packages_drivers ▷ {driver} ≠ ∅ // Make sure the driver have job allocated to&#10;      @grd3 result = dom(packages_drivers ▷ {driver}) ∩ dom(packages_own_status ▷ {pending}) // Get all the delivered packages that assigned to the driver.  &quot;dom(packages_drivers ▷ {driver})&quot; is used to find out the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {pending} is used to find the key in packages_own_status whick packages status is pending.&#10;  end&#10;&#10;  event changePackageStatusToIn_progress // This event is used for driver to change his package from pending to in_progress.  This event satisfied the requirement 9.&#10;    any user driver package&#10;    where&#10;      @grd1 driver ∈ drivers&#10;      @grd2 user ∈ drivers // user belongs to drivers.(only drivers can access this event)&#10;      @grd3 package ∈ packages&#10;      @grd4 package ∈ dom(packages_own_status ▷ {pending}) ∩ dom(packages_drivers ▷ {driver}) // Get all the allocated packages that assigned to the driver.  &quot;dom(packages_drivers ▷ {driver})&quot; is to find out  the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {pending} is used to find the key in packages_own_status which packages status is pending.&#10;      @grd5 packages_drivers(package) = user //Make sure each driver can only modify their package&#10;    then&#10;      @act1 packages_own_status(package) ≔ in_progress // Change the package status to in_progress.&#10;  end&#10;&#10;  event changePackageStatusToDelivered // This event is used for driver to change his package from in_progress to delivered.  This event satisfied the requirement 9.&#10;    any user driver package&#10;    where&#10;      @grd1 driver ∈ drivers&#10;      @grd2 user ∈ drivers // user belongs to drivers.(only drivers can access this event)&#10;      @grd3 package ∈ dom(packages_own_status ▷ {in_progress}) ∩ dom(packages_drivers ▷ {driver}) // //Get all the in_progress packages that assigned to the driver.  &quot;dom(packages_own_status ▷ {in_progress})&quot; is to find out  the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {allocated} is used to find the key in packages_own_status whick packages status is in_progress.&#10;      @grd4 packages_drivers(package) = user //Make sure each driver can only modify their package&#10;    then&#10;      @act1 packages_own_status ≔ packages_own_status{package ↦ delivered} // //Change the package status to delivered.&#10;  end&#10;end&#10;" version="5">
    <org.eventb.core.seesContext name="_V_i2MG1jEeyKIe3KksMd0g" org.eventb.core.target="Context_TransportCon"/>
    <org.eventb.core.event name="'" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="INITIALISATION">
        <org.eventb.core.action name="_24yHoG1kEeyKIe3KksMd0g" org.eventb.core.assignment="admins ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="_240j4G1kEeyKIe3KksMd0g" org.eventb.core.assignment="vendors ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
        <org.eventb.core.action name="_240j4W1kEeyKIe3KksMd0g" org.eventb.core.assignment="drivers ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
        <org.eventb.core.action name="_240j4m1kEeyKIe3KksMd0g" org.eventb.core.assignment="packages ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
        <org.eventb.core.action name="_243AIG1kEeyKIe3KksMd0g" org.eventb.core.assignment="messages ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act5"/>
        <org.eventb.core.action name="_243AIW1kEeyKIe3KksMd0g" org.eventb.core.assignment="packages_own_status ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act6"/>
        <org.eventb.core.action name="_243AIm1kEeyKIe3KksMd0g" org.eventb.core.assignment="packages_vendors ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act7"/>
        <org.eventb.core.action name="_245cYG1kEeyKIe3KksMd0g" org.eventb.core.assignment="packages_drivers ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act8"/>
        <org.eventb.core.action name="_245cYW1kEeyKIe3KksMd0g" org.eventb.core.assignment="messages_sent≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act9"/>
    </org.eventb.core.event>
    <org.eventb.core.variable name="_V_lScG1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="admins"/>
    <org.eventb.core.variable name="_V_lScW1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="vendors"/>
    <org.eventb.core.variable name="_V_nusG1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="drivers"/>
    <org.eventb.core.variable name="_V_nusW1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="packages"/>
    <org.eventb.core.variable name="_V_nusm1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="messages"/>
    <org.eventb.core.variable name="_V_nus21jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="packages_own_status"/>
    <org.eventb.core.variable name="_V_qK8G1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="packages_vendors"/>
    <org.eventb.core.variable name="_V_qK8W1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="packages_drivers"/>
    <org.eventb.core.variable name="_V_snMG1jEeyKIe3KksMd0g" org.eventb.core.generated="false" org.eventb.core.identifier="messages_sent"/>
    <org.eventb.core.invariant name="_V_snMW1jEeyKIe3KksMd0g" org.eventb.core.comment="managers belong to USER set" org.eventb.core.generated="false" org.eventb.core.label="inv1" org.eventb.core.predicate="admins ⊆  USER"/>
    <org.eventb.core.invariant name="_V_vDcG1jEeyKIe3KksMd0g" org.eventb.core.comment="drivers belong to USER set" org.eventb.core.generated="false" org.eventb.core.label="inv2" org.eventb.core.predicate="drivers ⊆  USER"/>
    <org.eventb.core.invariant name="_V_vDcW1jEeyKIe3KksMd0g" org.eventb.core.comment="vendors belong to USER set" org.eventb.core.generated="false" org.eventb.core.label="inv3" org.eventb.core.predicate="vendors ⊆  USER"/>
    <org.eventb.core.invariant name="_V_xfsG1jEeyKIe3KksMd0g" org.eventb.core.comment="packages belong to PACKAGE set" org.eventb.core.generated="false" org.eventb.core.label="inv4" org.eventb.core.predicate="packages ⊆  PACKAGE"/>
    <org.eventb.core.invariant name="_V_xfsW1jEeyKIe3KksMd0g" org.eventb.core.comment="Every package supplied by only one vendor and every package should have a vendor" org.eventb.core.generated="false" org.eventb.core.label="inv5" org.eventb.core.predicate="packages_vendors ∈ packages → vendors"/>
    <org.eventb.core.invariant name="_V_z78G1jEeyKIe3KksMd0g" org.eventb.core.comment="Every package can only carried by one driver. Not every package has a driver to deliver it." org.eventb.core.generated="false" org.eventb.core.label="inv6" org.eventb.core.predicate="packages_drivers ∈packages ⇸ drivers"/>
    <org.eventb.core.invariant name="_V_2YMG1jEeyKIe3KksMd0g" org.eventb.core.comment="Every package has a status{pending, in_progress, delivered}" org.eventb.core.generated="false" org.eventb.core.label="inv7" org.eventb.core.predicate="packages_own_status ∈ packages ⇸ package_status"/>
    <org.eventb.core.invariant name="_V_2YMW1jEeyKIe3KksMd0g" org.eventb.core.comment="messages belong to MESSAGE set" org.eventb.core.generated="false" org.eventb.core.label="inv8" org.eventb.core.predicate="messages ⊆  MESSAGE"/>
    <org.eventb.core.invariant name="_UH0bYG1qEeyI392TAVS9gA" org.eventb.core.comment="Every message with package information should be sent to one driver, So it was a function between message and packages." org.eventb.core.generated="false" org.eventb.core.label="inv9" org.eventb.core.predicate="messages_sent ∈ messages → packages"/>
    <org.eventb.core.event name="_UH23oG1qEeyI392TAVS9gA" org.eventb.core.comment="Add new admin to the system." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="addAdmin">
        <org.eventb.core.parameter name="_UH7wIG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.guard name="_UH7wIW1qEeyI392TAVS9gA" org.eventb.core.comment="User variable belongs to USER set" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="user ∈ USER"/>
        <org.eventb.core.guard name="_UH-MYG1qEeyI392TAVS9gA" org.eventb.core.comment="User variable is not belongs to admins subset" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="user ∉ admins"/>
        <org.eventb.core.action name="_UH-MYW1qEeyI392TAVS9gA" org.eventb.core.assignment="admins ≔ admins ∪ {user}" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="_UIH9YG1qEeyI392TAVS9gA" org.eventb.core.comment="User variable is not belongs to vendors subset" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="user ∉ vendors"/>
        <org.eventb.core.guard name="_UIKZoG1qEeyI392TAVS9gA" org.eventb.core.comment="User variable is not belongs to drivers subset" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="user ∉ drivers"/>
        <org.eventb.core.guard name="_UIKZoW1qEeyI392TAVS9gA" org.eventb.core.comment="Only System Admin could add new admin in this system" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="sys ∈ SYS_ADMIN"/>
        <org.eventb.core.parameter name="_meeEgHCJEeyw8qguQic-wQ" org.eventb.core.generated="false" org.eventb.core.identifier="sys"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_UIAooG1qEeyI392TAVS9gA" org.eventb.core.comment="Add new driver to the system. This event satisfied the requirement 1." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="addDriver">
        <org.eventb.core.parameter name="_UIDE4G1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.parameter name="_UIDE4W1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.guard name="_UIFhIG1qEeyI392TAVS9gA" org.eventb.core.comment="Driver variable belongs to USER set" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="driver ∈ USER"/>
        <org.eventb.core.guard name="_UIFhIW1qEeyI392TAVS9gA" org.eventb.core.comment="Driver variable is not belongs to admins subset" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="driver ∉ admins"/>
        <org.eventb.core.guard name="_UIUxsG1qEeyI392TAVS9gA" org.eventb.core.comment="Driver variable is not belongs to vendors subset" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="driver ∉ vendors"/>
        <org.eventb.core.guard name="_UIUxsW1qEeyI392TAVS9gA" org.eventb.core.comment="Driver variable is not belongs to driver subset" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="driver ∉ drivers"/>
        <org.eventb.core.action name="_UIM14G1qEeyI392TAVS9gA" org.eventb.core.assignment="drivers ≔ drivers ∪ {driver}" org.eventb.core.comment="add the new driver to the subset drivers" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="_UIXN8G1qEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="user ∈ admins"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_UIM14W1qEeyI392TAVS9gA" org.eventb.core.comment="Add new vendor to the system. This event satisfied the requirement 2." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="addVendor">
        <org.eventb.core.parameter name="_UIP5MG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="vendor"/>
        <org.eventb.core.parameter name="_UIP5MW1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.guard name="_UIP5Mm1qEeyI392TAVS9gA" org.eventb.core.comment="Vendor variable belongs to USER set" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="vendor ∈ USER"/>
        <org.eventb.core.guard name="_UISVcG1qEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_UIg-8W1qEeyI392TAVS9gA" org.eventb.core.comment="Vendor variable is not belongs to drivers subset" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="vendor ∉ drivers"/>
        <org.eventb.core.guard name="_UIyEsG1qEeyI392TAVS9gA" org.eventb.core.comment="Vendor variable is not belongs to vendors subset" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="vendor ∉ vendors"/>
        <org.eventb.core.action name="_UIZqMG1qEeyI392TAVS9gA" org.eventb.core.assignment="vendors ≔ vendors ∪ {vendor}" org.eventb.core.comment="add the new vendor to the vendors." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="_UIyEsW1qEeyI392TAVS9gA" org.eventb.core.comment="Vendor variable is not belongs to admins subset" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="vendor ∉ admins"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_UIZqMW1qEeyI392TAVS9gA" org.eventb.core.comment="Add new package and choose a vendor. According our to coursework 1, we need to select a vendor before assigh it to a driver. This event satisfied a part of the requirement 3." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="addPackage">
        <org.eventb.core.parameter name="_UIcGcG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.parameter name="_UIcGcW1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_UIeisG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="vendor"/>
        <org.eventb.core.guard name="_UIeisW1qEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.action name="_UIjbMG1qEeyI392TAVS9gA" org.eventb.core.assignment="packages_vendors(package) ≔ vendor" org.eventb.core.comment="add a new pair(package -&gt; vendor) to packages_vendors." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="_UIl3cG1qEeyI392TAVS9gA" org.eventb.core.assignment="packages ≔  packages ∪ {package}" org.eventb.core.comment="add the new package to packages." org.eventb.core.generated="false" org.eventb.core.label="act2"/>
        <org.eventb.core.guard name="_UIg-8G1qEeyI392TAVS9gA" org.eventb.core.comment="Make sure package variable is belong to PACKAGE set but not packages subset" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="package ∈ PACKAGE ∖ packages"/>
        <org.eventb.core.guard name="_UIvocW1qEeyI392TAVS9gA" org.eventb.core.comment="Vendor variable is belong to vendors subset" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="vendor ∈vendors"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_qvM6IG15EeykfLAPK35zHg" org.eventb.core.comment="Assign a package and send a message to a driver. This event satisfied a part of the requirement 3 and 6." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="assignPackage">
        <org.eventb.core.parameter name="_UIoTsG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.parameter name="_UIoTsW1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_UIqv8G1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="vendor"/>
        <org.eventb.core.parameter name="_UIqv8W1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.parameter name="_UItMMG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="message"/>
        <org.eventb.core.guard name="_UItMMW1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="package ∈ packages"/>
        <org.eventb.core.guard name="_UIvocG1qEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_8kzDsG1uEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="vendor ∈ vendors"/>
        <org.eventb.core.action name="_UI0g8G1qEeyI392TAVS9gA" org.eventb.core.assignment="packages_own_status(package) ≔ pending" org.eventb.core.comment="change the pair which in packages_own_status to &quot;package -&gt; pending&quot;." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="_UI0g8W1qEeyI392TAVS9gA" org.eventb.core.assignment="packages_drivers(package) ≔ driver" org.eventb.core.comment="add a new pair(package -&gt; driver) to packages_drivers ." org.eventb.core.generated="false" org.eventb.core.label="act2"/>
        <org.eventb.core.action name="_UI29MG1qEeyI392TAVS9gA" org.eventb.core.assignment="messages_sent(message) ≔ package" org.eventb.core.comment="add a new pair(message -&gt; package) to message_sent." org.eventb.core.generated="false" org.eventb.core.label="act3"/>
        <org.eventb.core.action name="_pq1n8G4aEeyX_67wVFPyGg" org.eventb.core.assignment="messages ≔ messages ∪ {message}" org.eventb.core.comment="Add new message" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
        <org.eventb.core.guard name="_jXis4G11EeykfLAPK35zHh" org.eventb.core.comment="Make sure package variable is belong to MESSAGE set but not messages subset" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="message ∈ MESSAGE ∖ messages"/>
        <org.eventb.core.guard name="_mesG8HCJEeyw8qguQic-wQ" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_-KkqQHCFEeyQ3KcTnFfU2A" org.eventb.core.comment="Only package without any status infotmation can be assing to driver" org.eventb.core.generated="false" org.eventb.core.label="grd6" org.eventb.core.predicate="{package} ◁ packages_own_status = ∅"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_hQW2gHCtEeyck_gRyEwe3Q" org.eventb.core.comment="Send a message to driver during the driver attending the delivery job" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="sendMessageToDriver">
        <org.eventb.core.parameter name="_hQW2gXCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.identifier="message"/>
        <org.eventb.core.parameter name="_Yn0UcG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.parameter name="_Ynvb8G1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_YnuN0G1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.guard name="_YnwqEG1tEeyI392TAVS9gA" org.eventb.core.comment="Make sure the message is new message" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="message ∈ MESSAGE ∖ messages"/>
        <org.eventb.core.guard name="_YnxRIG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="package ∈ packages"/>
        <org.eventb.core.guard name="_Sm7osG1wEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_ihJBoG17EeykfLAPK35zHg" org.eventb.core.comment="Make sure the driver is attending a delivery job" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="packages_drivers ▷ {driver} ≠ ∅"/>
        <org.eventb.core.guard name="__iO5kHCtEeyck_gRyEwe3Q" org.eventb.core.comment="Make sure the pacakge is assigned to this driver" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="package ∈ dom(packages_drivers▷{driver})"/>
        <org.eventb.core.guard name="__iO5kXCtEeyck_gRyEwe3Q" org.eventb.core.comment="Only admin could access this event" org.eventb.core.generated="false" org.eventb.core.label="grd6" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_O5KAQHCuEeyck_gRyEwe3Q" org.eventb.core.comment="Make sure package has a status." org.eventb.core.generated="false" org.eventb.core.label="grd7" org.eventb.core.predicate="{package} ◁ packages_own_status ≠ ∅"/>
        <org.eventb.core.guard name="_PX3gEHCvEeyck_gRyEwe3Q" org.eventb.core.comment="Make sure package has a status" org.eventb.core.generated="false" org.eventb.core.label="grd8" org.eventb.core.predicate="packages_own_status(package) ∈ package_status"/>
        <org.eventb.core.action name="_AfodYG12EeykfLAPK35zHg" org.eventb.core.assignment="messages ≔ messages ∪ {message}" org.eventb.core.comment="Add new message" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="_XcmZIG_LEeyQzPsvreHoQw" org.eventb.core.assignment="messages_sent(message) ≔ package" org.eventb.core.comment="add a new pair(message -&gt; package) to message_sent." org.eventb.core.generated="false" org.eventb.core.label="act2"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_Yns_sG1tEeyI392TAVS9gA" org.eventb.core.comment="Show the all the package which status are pending, in_progress or delivered. This event satisfied the requirement 4." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="viewJobList">
        <org.eventb.core.parameter name="_Yn07gG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_Yn1ikG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="result"/>
        <org.eventb.core.guard name="_Yn2JoG1tEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_Yn3XwG1tEeyI392TAVS9gA" org.eventb.core.comment="Show the packages which status is pending, in_progress or delivered." org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="result = packages_own_status ▷{pending, in_progress, delivered}"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_aF9rcG2DEeykfLAPK35zHg" org.eventb.core.comment="cancel the pending package.This event satisfied the requirement 7." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="cancelPendingPackage">
        <org.eventb.core.action name="_BExx0G12EeykfLAPK35zHg" org.eventb.core.assignment="packages_own_status ≔{package} ⩤ packages_own_status" org.eventb.core.comment="Remove the pair that contain this package from packages_own_status." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="_hQdkMHCtEeyck_gRyEwe3Q" org.eventb.core.assignment="packages_drivers ≔  {package} ⩤ packages_drivers" org.eventb.core.comment="Remove the driver information of this package" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
        <org.eventb.core.action name="_jO3ngHAyEeyA04Ev76YMKw" org.eventb.core.assignment="messages_sent ≔  messages_sent ⩥ {package}" org.eventb.core.comment="Remove message information related to package" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
        <org.eventb.core.action name="_jO3ngXAyEeyA04Ev76YMKw" org.eventb.core.assignment="messages ≔  messages ∖ dom(messages_sent ▷ {package})" org.eventb.core.comment="Remove message from messages set" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
        <org.eventb.core.parameter name="_8kwncG1uEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.parameter name="_Yn6bEG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.guard name="_Yn8QQG1tEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_Yn83UG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="package ∈ packages"/>
        <org.eventb.core.guard name="_fRB_8G10EeykfLAPK35zHg" org.eventb.core.comment="Make sure package has a status, same like package∈dom(packages_own_status)" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="{package} ◁ packages_own_status ≠ ∅"/>
        <org.eventb.core.guard name="_ksjKcHAGEeyQzPsvreHoQw" org.eventb.core.comment="Filter the package in pending." org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="packages_own_status(package) = pending"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_Rsx8gG2PEeykfLAPK35zHg" org.eventb.core.comment="Show all the delivered packages by a spcecific driver.This event satisfied the requirement 5." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="viewDeliveredPackageList">
        <org.eventb.core.parameter name="_Yn50AG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.parameter name="_8kvZUG1uEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_Yn7CIG1tEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="result"/>
        <org.eventb.core.guard name="_8kxOgG1uEeyI392TAVS9gA" org.eventb.core.comment="user belongs to admins.(only admin can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="user ∈ admins"/>
        <org.eventb.core.guard name="_8kycoG1uEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_jXis4G11EeykfLAPK35zHg" org.eventb.core.comment="Get all the delivered packages that assigned to the driver.  dom(packages_drivers ▷ {driver}) is used to find out the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {delivered} is used to find the key in packages_own_status whick packages status is delivered." org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="result = dom(packages_drivers ▷ {driver}) ∩ dom(packages_own_status ▷ {delivered})"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_Rs0YwG2PEeykfLAPK35zHg" org.eventb.core.comment="Driver could view the job allocated to them， meet the requirement 8" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="viewAllocatedJobs">
        <org.eventb.core.parameter name="_8kwAYG1uEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.parameter name="_fQ1LoG10EeykfLAPK35zHg" org.eventb.core.generated="false" org.eventb.core.identifier="result"/>
        <org.eventb.core.guard name="_Sm5zgG1wEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_Sm7BoG1wEeyI392TAVS9gA" org.eventb.core.comment="Make sure the driver have job allocated to" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="packages_drivers ▷ {driver} ≠ ∅"/>
        <org.eventb.core.guard name="_qkjGIG11EeykfLAPK35zHg" org.eventb.core.comment="Get all the delivered packages that assigned to the driver.  &quot;dom(packages_drivers ▷ {driver})&quot; is used to find out the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {pending} is used to find the key in packages_own_status whick packages status is pending." org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="result = dom(packages_drivers ▷ {driver}) ∩ dom(packages_own_status ▷ {pending})"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_SmxQoG1wEeyI392TAVS9gA" org.eventb.core.comment="This event is used for driver to change his package from pending to in_progress.  This event satisfied the requirement 9." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="changePackageStatusToIn_progress">
        <org.eventb.core.parameter name="_Sm3-UG1wEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_Sm4lYG1wEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.guard name="_aGWtAG2DEeykfLAPK35zHg" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_QTpHcG4gEeyoIMAxtH4LEw" org.eventb.core.comment="user belongs to drivers.(only drivers can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="user ∈ drivers"/>
        <org.eventb.core.guard name="_hQq_kHCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="package ∈ packages"/>
        <org.eventb.core.guard name="_hQn8QHCtEeyck_gRyEwe3Q" org.eventb.core.comment="Get all the allocated packages that assigned to the driver.  &quot;dom(packages_drivers ▷ {driver})&quot; is to find out  the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {pending} is used to find the key in packages_own_status which packages status is pending." org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="package ∈ dom(packages_own_status ▷ {pending}) ∩ dom(packages_drivers ▷ {driver})"/>
        <org.eventb.core.action name="_aGZJQG2DEeykfLAPK35zHg" org.eventb.core.assignment="packages_own_status(package) ≔ in_progress" org.eventb.core.comment="Change the package status to in_progress." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.parameter name="_Sm5McG1wEeyI392TAVS9gA" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.guard name="_jRVUMHJ4EeyiiJlcyJGCcQ" org.eventb.core.comment="Make sure each driver can only modify their package" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="packages_drivers(package) = user"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_Sm3XQG1wEeyI392TAVS9gA" org.eventb.core.comment="This event is used for driver to change his package from in_progress to delivered.  This event satisfied the requirement 9." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="changePackageStatusToDelivered">
        <org.eventb.core.parameter name="_hQpKYHCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.identifier="user"/>
        <org.eventb.core.parameter name="_hQpKYXCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.identifier="driver"/>
        <org.eventb.core.guard name="_hQpxcHCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="driver ∈ drivers"/>
        <org.eventb.core.guard name="_hQqYgHCtEeyck_gRyEwe3Q" org.eventb.core.comment="user belongs to drivers.(only drivers can access this event)" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="user ∈ drivers"/>
        <org.eventb.core.action name="_hQq_kXCtEeyck_gRyEwe3Q" org.eventb.core.assignment="packages_own_status ≔ packages_own_status{package ↦ delivered}" org.eventb.core.comment="//Change the package status to delivered." org.eventb.core.generated="false" org.eventb.core.label="act1"/>
        <org.eventb.core.parameter name="__ic8AHCtEeyck_gRyEwe3Q" org.eventb.core.generated="false" org.eventb.core.identifier="package"/>
        <org.eventb.core.guard name="_6SOCkHDbEeyVfLgsDUAG2g" org.eventb.core.comment="//Get all the in_progress packages that assigned to the driver.  &quot;dom(packages_own_status ▷ {in_progress})&quot; is to find out  the key of the package_drivers that contains the driver. dom(packages_own_status ▷ {allocated} is used to find the key in packages_own_status whick packages status is in_progress." org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="package ∈ dom(packages_own_status ▷ {in_progress}) ∩ dom(packages_drivers ▷ {driver})"/>
        <org.eventb.core.guard name="_PhfQAHJ5EeyiiJlcyJGCcQ" org.eventb.core.comment="Make sure each driver can only modify their package" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="packages_drivers(package) = user"/>
    </org.eventb.core.event>
</org.eventb.core.machineFile>
